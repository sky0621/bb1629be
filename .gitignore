# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work

.idea

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
frontend/node_modules
frontend/.pnp
.pnp.js

# testing
frontend/coverage

# next.js
frontend/.next/
frontend/out/

# production
frontend/build

# misc
frontend/.DS_Store
frontend/*.pem

# debug
frontend/npm-debug.log*
frontend/yarn-debug.log*
frontend/yarn-error.log*

# local env files
frontend/.env*.local

# vercel
frontend/.vercel

# typescript
frontend/*.tsbuildinfo
frontend/next-env.d.ts

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
*tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
