name: "<common> build and deploy"

on:
  workflow_call:
    inputs:
      env:
        type: string
        required: true

env:
  service_account: gha-sa
  region: asia-northeast1
  gar_location: asia-northeast1
  repo: app-repo
  service: app-service

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - id: "checkout"
        name: "Checkout"
        uses: "actions/checkout@v3"

      - id: "set-variables"
        name: "Set variables"
        run: |
          prj_id=${{ vars.GCP_PROJECT_ID_BASE }}-${{ inputs.env }}
          prj_no=${{ vars.GCP_PROJECT_NO }}
          workload_identity_id_suffix=${{ vars.GCP_WORKLOAD_IDENTITY_ID_SUFFIX }}
          pool=workloadIdentityPools/gha-pool-${workload_identity_id_suffix}
          provider=providers/gha-prov-${workload_identity_id_suffix}
          repo_domain=${{ env.gar_location }}-docker.pkg.dev
          conn_name=${prj_id}:${{ env.region }}:${prj_id}-instance

          echo "WORKLOAD_IDENTITY_PROVIDER=projects/${prj_no}/locations/global/${pool}/${provider}" >> $GITHUB_OUTPUT
          echo "SERVICE_ACCOUNT=${{ env.service_account }}@${prj_id}.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
          echo "INSTANCE_CONNECTION_NAME=${conn_name}" >> $GITHUB_OUTPUT

          echo "PROJECT_ID=${prj_id}" >> $GITHUB_OUTPUT
          echo "WORKLOAD_IDENTITY_PROVIDER=projects/${prj_no}/locations/global/${pool}/${provider}" >> $GITHUB_OUTPUT
          echo "SERVICE_ACCOUNT=${{ env.service_account }}@${prj_id}.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
          echo "REPO_DOMAIN=${repo_domain}" >> $GITHUB_OUTPUT
          echo "IMAGE=${repo_domain}/${prj_id}/${{ env.repo }}/${{ env.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - id: "node-setup"
        name: "Set up Nodejs"
        uses: "actions/setup-node@v3"
        with:
          node-version: 18.x
          cache: "npm"

      - id: "npm-install"
        name: "Install"
        run: npm install

      - id: "format"
        name: "Prettier format"
        run: npm run format

      - id: "lint"
        name: "ES Lint"
        run: npm run lint

      - id: "unittest"
        name: "Unit test"
        run: npm run test

      - id: "google-auth"
        name: "Google auth"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "${{ steps.set-variables.outputs.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ steps.set-variables.outputs.SERVICE_ACCOUNT }}"

      - id: "gcloud-setup"
        name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          project_id: "${{ steps.set-variables.outputs.PROJECT_ID }}"

      - id: "docker-auth"
        name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ steps.set-variables.outputs.REPO_DOMAIN }}

      - id: "build"
        name: "Build container"
        run: |-
          docker build -t "${{ steps.set-variables.outputs.IMAGE }}" .

      - id: "push"
        name: "Push container"
        run: |-
          docker push "${{ steps.set-variables.outputs.IMAGE }}"

      - id: "deploy"
        name: "Deploy to Cloud Run"
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.service }}
          region: ${{ env.region }}
          image: ${{ steps.set-variables.outputs.IMAGE }}
          flags: "--allow-unauthenticated"
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400

      - id: "update-traffic"
        name: "Update traffic to latest"
        run: |-
          gcloud run services update-traffic ${{ env.service }} --region=${{ env.region }} --to-latest

      # If required, use the Cloud Run url output in later steps
      - id: "show-output"
        name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
